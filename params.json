{"name":"Lambdamacro","tagline":"Lambda with shorts using macros","body":"LambdaMacro\r\n===========\r\n\r\nLambda with shorts using macros\r\n\r\nBased on hxshort ideas by Simn.\r\nMain difference - lambda inlined into code, for speed reasons.\r\n\r\nfold not implemented.\r\n\r\nBest used through 'using ryz.utils.LambdaMacro' syntax, except map, concat and filter for arrays.\r\n\r\n\r\nSpeed difference up to 20 times with no side effects.\r\nCheck LambdaMacroTest.hx or online at [http://gametrax.eu/game/35a3c97a95](http://gametrax.eu/game/35a3c97a95)\r\n\r\n\r\n\r\nShort syntax:\r\n===========\r\n```\r\narg => body\r\n[arg] => body\r\n[arg1, arg2] => body\r\n```\r\n\r\nUnderscores:\r\n===========\r\n```\r\niter(body) same as iter(_ => body)\r\nmapi(body) same as mapi([_, __] => body)\r\nmapi(x => body) same as mapi([x, _] => body)\r\nmapi([x] => body) same as mapi([x, _] => body)\r\n```\r\n\r\nExampe usage:\r\n===========\r\n```\r\nvar t = ['qwe'];\r\nvar tt = ['asd'];\r\n\r\n\r\ntrace('concat:');\r\nvar t = LambdaMacro.concat(t, tt);\r\ntrace(t);\r\nt.iter(x => trace(x));\r\n\r\nvar t = t.array();\r\n\r\nvar a = ['a', 'b', 'c'];\r\n\r\ntrace('foreach:');\r\ntrace(a.foreach(_ != 'qwe'));\r\ntrace(a.foreach(_ == 'qwe'));\r\n\r\ntrace('map:');\r\nvar b = LambdaMacro.map(a, _ + 'from map');\r\ntrace(b);\r\n\r\ntrace('mapi:');\r\nvar b = a.mapi([i, v] => 'in mapi val=$v at idx=$i');\r\ntrace(b);\r\nvar b = a.mapi(i => 'in mapi with single val=$_ at idx=$i');\r\ntrace(b);\r\nvar b = a.mapi([i] => 'in mapi with arr1 val=$_ at idx=$i');\r\ntrace(b);\r\n\r\n\r\ntrace('exists:');\r\ntrace(a.exists(x => x == 'b'));\r\n\r\ntrace('has:');\r\ntrace(a.has('qwe'));\r\n\r\ntrace('count:');\r\nvar cnt = a.count(x => x == 'b');\r\ntrace(cnt);\r\n\r\nvar cnt = a.count(x => { trace('from cnt $x'); x != 'b'; } );\r\ntrace(cnt);\r\n\r\ntrace('iter:');\r\na.iter(x => trace(x));\r\n\r\ntrace('filter:');\r\ntrace(LambdaMacro.filter(a, _ != 'b'));\r\n\r\ntrace('countany:');\r\ntrace(a.countAny());\r\n\r\ntrace('empty:');\r\ntrace(a.empty());\r\ntrace([].empty());\r\n\r\ntrace('index of:');\r\ntrace(a.indexOf('qwe'));\r\ntrace(a.indexOf('a'));\r\ntrace(a.indexOf('b'));\r\ntrace(a.indexOf('c'));\r\n\r\n\r\ntrace('multi iter:');\r\nvar a = ['a', 'b', 'c'];\r\nvar b = ['1', '2', '3', '4'];\r\nvar c = [a, b];\r\n\r\nc.iter(x =>\r\n\tx.iter(y => \r\n\t\ttrace('value $y from $x')));\r\n\r\nc.iter(x => { var cnt = x.countAny(); trace('countAny in $x = $cnt'); } );\r\n\r\ntrace('total cnt:');\r\nvar totalCnt = 0;\r\nc.iter(x => { totalCnt += x.countAny(); } );\r\ntrace(totalCnt);\r\n\r\ntrace('total cnt with x=> x=>:');\r\nvar totalCnt = 0;\r\nc.iter(x => { totalCnt += x.count(x => x != '2'); } );\r\ntrace(totalCnt);\r\n\r\ntrace('total cnt with x=> y=>:');\r\nvar totalCnt = 0;\r\nc.iter(x => { totalCnt += x.count(y => y != '2'); } );\r\ntrace(totalCnt);\r\n\r\ntrace('multi join x=>y:');\r\nvar s = 'multi join = ';\r\nc.iter(x => x.iter(y => s += y) );\r\ntrace(s);\r\n\r\ntrace('multi join x=>x:');\r\nvar s = 'multi join = ';\r\nc.iter(x => x.iter(x => s += x) );\r\ntrace(s);\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}